<?php

namespace app\controllers;
ini_set('memory_limit', '1024M');
use app\models\Products;
use Yii;
use app\models\MetalsPrices;
use app\models\MetalsPricesSearch;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * MetalspricesController implements the CRUD actions for MetalsPrices model.
 */
class MetalspricesController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index','create','deleteimage','upload','add','update'],
                'rules' => [
                    [
                        'actions' => ['index','deleteimage','upload','create','add','update'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }



    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
        if(Yii::$app->user->identity->role!='Superadmin'){
            return $this->redirect('site/index')->send();
        }
    }

    /**
     * Creates a new MetalsPrices model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = MetalsPrices::find()->orderBy([
            'id' => SORT_DESC])->one();

        if ($model->load(Yii::$app->request->post())) {
                if($model->validate()) {

                        $newmodel = new MetalsPrices();
                        $newmodel->palladium_price = $model->palladium_price;
                        $newmodel->platinum_price = $model->platinum_price;
                        $newmodel->rhodium_price = $model->rhodium_price;
                        $newmodel->created_at = date('Y-m-d H:i:s');
                        if($newmodel->save(false)) {
                            //$products = Products::find()->all();
                            //if(!empty($products)){
                                $myUpdate = "";
                                foreach (Products::find()->each(100) as $product){
                                    $platinum_price = (float)$newmodel->platinum_price;
                                    $palladium_price = (float)$newmodel->palladium_price;
                                    $rhodium_price = (float)$newmodel->rhodium_price;
                                    $usdollar = 14.50;
                                    $convertweight = 31.1028;
                                    $platinum_ppm = $product->platinum_ppt;
                                    $palladium_ppm = $product->palladium_ppt;
                                    $rhodium_ppm = $product->rhodium_ppt;
                                    $weight = $product->converter_ceramic_weight;
                                    $convertervalueusd = $weight*(($platinum_ppm*($platinum_price/$convertweight))+($palladium_ppm*($palladium_price/$convertweight))+($rhodium_ppm*($rhodium_price/$convertweight)))/1000;
                                    $product->converter_value = $convertervalueusd;
                                    $platinum = (($convertervalueusd-$usdollar)*0.8)+14.50;
                                    $gold = (($convertervalueusd-$usdollar)*0.75)+14.50;
                                    $green = (($convertervalueusd-$usdollar)*0.7)+14.50;

                                    $product->platinum_price = $platinum;
                                    $product->gold_price = $gold;
                                    $product->green_price = $green;
                                    $product->updated_at = date('Y-m-d H:i:s');
                                    $product->save(false);

                                }
                                //\Yii::$app->db->createCommand($myUpdate)->execute();







                            return $this->redirect(['create']);
                        }


                }else{
                    return $this->render('create', [
                        'model' => $model
                    ]);
                }

        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing MetalsPrices model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing MetalsPrices model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the MetalsPrices model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return MetalsPrices the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = MetalsPrices::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
